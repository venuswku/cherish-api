const router = require("express").Router();
let Action = require("../models/action.model");

// Route: /actions/suggest
// Creates a suggested act of kindness, which will later be reviewed/approved by me.
router.route("/suggest").post((req, res) => {
  const {
    act: suggestedAction,
    desc: suggestedDesc,
    for: suggestedFor,
    like: suggesterLikes,
    did: suggesterDidAction,
    suggester: suggesterId,
  } = req.body;
  
  // Assign data from POST request to a new instance of Action.
  let actionData = {
    action: suggestedAction,
    description: suggestedDesc,
    for: suggestedFor,
    likes: (suggesterLikes ? [suggesterId] : []),
    done: (suggesterDidAction ? [suggesterId] : []),
    suggestedBy: suggesterId,
    approved: false,
  };
  if (req.body.hasOwnProperty("img")) {
    actionData["imageLink"] = req.body.img;
  }
  const newAction = new Action(actionData);
  
  // Save the new Action instance to the database.
  newAction.save()
    .then(() => res.json("Your suggested act of kindness has been submitted for approval!"))
    .catch(err => res.status(400).json("Error: " + err));
});

// Route: /actions/
// Reads and returns all actions from the MongoDB Atlas database.
router.route("/").get((req, res) => {
  Action.find()                                         // find() returns a promise
    .then(actions => res.json(actions))                 // then returns actions in JSON format
    .catch(err => res.status(400).json("Error: " + err));
});

// Route: /actions/:id
// Reads and returns an action with the specified object id, which is automatically generated by MongoDB.
router.route("/:id").get((req, res) => {
  Action.findById(req.params.id)
    .then(action => res.json(action))
    .catch(err => res.status(400).json("Error: " + err));
});

// Route: /actions/like/:id
// Updates the number of likes for an existing action with the specified object id.
router.route("/like/:id").post((req, res) => {
  Action.findById(req.params.id)
    .then(existingAction => {
      const userObjectId = req.body.userId;
      if (!existingAction.likes.includes(userObjectId)) {
        // If we've don't see the user's object id in the list of people who liked the specified act of kindness, add them.
        existingAction.likes.append(userObjectId);
      } else {
        // Else the user's id is already in the list and they want to remove their like, so remove their object id.
        const likerIndex = existingAction.likes.indexOf(userObjectId);
        existingAction.likes.splice(likerIndex, 1);
      }
    })
    .catch(err => res.status(400).json("Error: " + err));
});

// Route: /actions/done/:id
// Updates the number of people who did an existing action with the specified object id.
router.route("/done/:id").post((req, res) => {
  Action.findById(req.params.id)
    .then(existingAction => {
      const userObjectId = req.body.userId;
      if (!existingAction.done.includes(userObjectId)) {
        // If we've don't see the user's object id in the list of people who did the specified act of kindness, add them.
        existingAction.done.append(userObjectId);
      } else {
        // Else the user's id is already in the list and they want to remove their done vote, so remove their object id.
        const donerIndex = existingAction.done.indexOf(userObjectId);
        existingAction.done.splice(donerIndex, 1);
      }
    })
    .catch(err => res.status(400).json("Error: " + err));
});

// Route: /actions/:id
// Deletes an action with the specified object id, which is automatically generated by MongoDB.
router.route("/:id").delete((req, res) => {
  Action.findByIdAndDelete(req.params.id)
    .then(() => res.json("Specified act of kindness has successfully been deleted."))
    .catch(err => res.status(400).json("Error: " + err));
});

module.exports = router;